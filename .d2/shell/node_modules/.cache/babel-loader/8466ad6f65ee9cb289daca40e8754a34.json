{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport cx from 'classnames';\nimport propTypes from 'prop-types';\nimport React, { Component, createRef } from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { Checked, Unchecked } from '../icons/Radio.js';\nimport { colors, theme } from '../theme.js';\nimport styles from './styles.js';\nconst icons = {\n  styles: React.createElement(_JSXStyle, {\n    id: \"1718424161\"\n  }, [\"svg.jsx-1718424161{display:block;height:24px;width:24px;fill:\".concat(theme.default, \";}\"), \".focus.jsx-1718424161{fill:\".concat(colors.grey800, \";}\"), \".checked.jsx-1718424161{fill:\".concat(colors.teal400, \";}\"), \".disabled.jsx-1718424161{color:\".concat(theme.disabled, \";fill:\").concat(theme.disabled, \";}\"), \".error.jsx-1718424161{fill:\".concat(theme.error, \";}\"), \".valid.jsx-1718424161{fill:\".concat(theme.valid, \";}\"), \".warning.jsx-1718424161{fill:\".concat(theme.warning, \";}\")]),\n  className: \"jsx-1718424161\"\n};\nconst Input = React.forwardRef(({\n  name,\n  value,\n  checked,\n  disabled,\n  tabIndex,\n  onChange,\n  onFocus,\n  onBlur\n}, ref) => React.createElement(\"div\", {\n  className: \"jsx-1102028186\"\n}, React.createElement(\"input\", {\n  type: \"radio\",\n  ref: ref,\n  name: name,\n  value: value,\n  checked: checked,\n  disabled: disabled,\n  tabIndex: tabIndex,\n  onChange: onChange,\n  onFocus: onFocus,\n  onBlur: onBlur,\n  className: \"jsx-1102028186\"\n}), React.createElement(_JSXStyle, {\n  id: \"1102028186\"\n}, [\"div.jsx-1102028186{height:0;width:0;overflow:hidden;}\"])));\n\nclass Radio extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"ref\", createRef());\n\n    _defineProperty(this, \"onFocus\", e => {\n      this.setState({\n        focus: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n    });\n\n    _defineProperty(this, \"onBlur\", e => {\n      this.setState({\n        focus: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    });\n\n    this.state = {\n      focus: props.initialFocus\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.focus) {\n      this.ref.current.focus();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          _this$props$checked = _this$props.checked,\n          checked = _this$props$checked === void 0 ? false : _this$props$checked,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          error = _this$props.error,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          name = _this$props.name,\n          onChange = _this$props.onChange,\n          required = _this$props.required,\n          tabIndex = _this$props.tabIndex,\n          valid = _this$props.valid,\n          value = _this$props.value,\n          warning = _this$props.warning;\n    const focus = this.state.focus;\n    const classes = cx(icons.className, {\n      checked: checked && !valid && !error && !warning,\n      disabled,\n      valid,\n      error,\n      warning,\n      focus\n    });\n    return React.createElement(\"label\", {\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx(className, {\n        disabled\n      }) || \"\")\n    }, React.createElement(Input, {\n      ref: this.ref,\n      name: name,\n      value: value,\n      checked: checked,\n      disabled: disabled,\n      tabIndex: tabIndex,\n      onChange: onChange,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur\n    }), React.createElement(\"div\", {\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx('icon', {\n        focus\n      }) || \"\")\n    }, checked ? React.createElement(Checked, {\n      className: classes\n    }) : React.createElement(Unchecked, {\n      className: classes\n    })), icon, React.createElement(\"span\", {\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx({\n        required,\n        disabled\n      }) || \"\")\n    }, label), icons.styles, React.createElement(_JSXStyle, {\n      id: styles.__hash\n    }, styles));\n  }\n\n}\n\nRadio.propTypes = {\n  onChange: propTypes.func.isRequired,\n  name: propTypes.string.isRequired,\n  value: propTypes.string.isRequired,\n  className: propTypes.string,\n  label: propTypes.string,\n  tabIndex: propTypes.string,\n  icon: propTypes.element,\n  onFocus: propTypes.func,\n  onBlur: propTypes.func,\n  required: propTypes.bool,\n  checked: propTypes.bool,\n  disabled: propTypes.bool,\n  valid: statusPropType,\n  warning: statusPropType,\n  error: statusPropType,\n  initialFocus: propTypes.bool\n};\nexport { Radio };","map":null,"metadata":{},"sourceType":"module"}