{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { colors } from '@dhis2/ui-core';\nimport Apps from './Apps';\nimport Profile from './Profile';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { Logo } from './Logo.js';\nimport { Title } from './Title.js';\nimport { Notifications } from './Notifications.js';\nimport '../locales';\nimport i18n from '@dhis2/d2-i18n';\nconst query = {\n  systemInfo: {\n    resource: 'system/info'\n  },\n  user: {\n    resource: 'me'\n  },\n  apps: {\n    resource: 'action::menu/getModules'\n  },\n  notifications: {\n    resource: 'me/dashboard'\n  }\n};\nexport const HeaderBar = ({\n  appName,\n  className\n}) => {\n  const _useDataQuery = useDataQuery(query),\n        loading = _useDataQuery.loading,\n        error = _useDataQuery.error,\n        data = _useDataQuery.data;\n\n  useEffect(() => {\n    const getPath = path => path.startsWith('http:') || path.startsWith('https:') ? path : \"\".concat(data.systemInfo.contextPath, \"/api/\").concat(path);\n\n    if (!loading && !error) data.apps.modules.forEach(app => {\n      app.icon = getPath(app.icon);\n      app.defaultAction = getPath(app.defaultAction);\n    });\n  }, [data]);\n\n  if (!loading && !error) {\n    // TODO: This will run every render which is probably wrong!  Also, setting the global locale shouldn't be done in the headerbar\n    const locale = data.user.settings.keyUiLocale || 'en';\n    i18n.changeLanguage(locale);\n  }\n\n  return React.createElement(\"header\", {\n    className: _JSXStyle.dynamic([[\"1335571883\", [colors.white]]]) + \" \" + (className || \"\")\n  }, !loading && !error && React.createElement(React.Fragment, null, React.createElement(Logo, {\n    baseUrl: data.systemInfo.contextPath\n  }), React.createElement(Title, {\n    app: appName,\n    instance: data.systemInfo.systemName\n  }), React.createElement(\"div\", {\n    className: _JSXStyle.dynamic([[\"1335571883\", [colors.white]]]) + \" \" + \"right-control-spacer\"\n  }), React.createElement(Notifications, {\n    interpretations: data.notifications.unreadInterpretations,\n    messages: data.notifications.unreadMessageConversations,\n    contextPath: data.systemInfo.contextPath\n  }), React.createElement(Apps, {\n    apps: data.apps.modules,\n    contextPath: data.systemInfo.contextPath\n  }), React.createElement(Profile, {\n    user: data.user,\n    contextPath: data.systemInfo.contextPath\n  })), React.createElement(_JSXStyle, {\n    id: \"1335571883\",\n    dynamic: [colors.white]\n  }, [\"header.__jsx-style-dynamic-selector{background-color:#2c6693;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:48px;border-bottom:1px solid rgba(32,32,32,0.15);color:\".concat(colors.white, \";}\"), \".right-control-spacer.__jsx-style-dynamic-selector{margin-left:auto;}\"]));\n};\nHeaderBar.propTypes = {\n  className: PropTypes.string,\n  appName: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}