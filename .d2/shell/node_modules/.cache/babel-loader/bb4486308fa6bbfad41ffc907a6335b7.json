{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\nimport propTypes from 'prop-types';\nimport React, { Component, createRef } from 'react';\nimport { buttonVariantPropType, sizePropType } from '../common-prop-types';\nimport styles from './styles.js';\nexport class Button extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"buttonRef\", createRef());\n  }\n\n  componentDidMount() {\n    if (this.props.initialFocus) {\n      this.buttonRef.current.focus();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          type = _this$props.type,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          name = _this$props.name,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onClick = _this$props.onClick,\n          className = _this$props.className,\n          primary = _this$props.primary,\n          secondary = _this$props.secondary,\n          destructive = _this$props.destructive,\n          small = _this$props.small,\n          large = _this$props.large;\n    return React.createElement(\"button\", {\n      disabled: disabled,\n      onClick: onClick,\n      type: type,\n      name: name,\n      value: value,\n      ref: this.buttonRef,\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx(className, {\n        primary,\n        secondary,\n        destructive,\n        small,\n        large,\n        'icon-only': icon && !children,\n        icon\n      }) || \"\")\n    }, icon && React.createElement(\"span\", {\n      className: \"jsx-\".concat(styles.__hash) + \" \" + \"button-icon\"\n    }, icon), children, React.createElement(_JSXStyle, {\n      id: styles.__hash\n    }, styles));\n  }\n\n}\nButton.defaultProps = {\n  type: 'button'\n};\nButton.propTypes = {\n  onClick: propTypes.func,\n  className: propTypes.string,\n  icon: propTypes.element,\n  name: propTypes.string,\n  value: propTypes.string,\n  type: propTypes.oneOf(['submit', 'reset', 'button']),\n  small: sizePropType,\n  large: sizePropType,\n  primary: buttonVariantPropType,\n  secondary: buttonVariantPropType,\n  destructive: buttonVariantPropType,\n  disabled: propTypes.bool,\n  initialFocus: propTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}