{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { LabelFilled, LabelOutlined } from '../FieldLabel';\nimport { theme } from '../theme.js';\nimport { Input } from './Input.js';\n\nclass InputField extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      focus: this.props.initialFocus\n    });\n\n    _defineProperty(this, \"onFocus\", e => {\n      this.setState({\n        focus: true\n      });\n      this.props.onFocus(e);\n    });\n\n    _defineProperty(this, \"onBlur\", e => {\n      this.setState({\n        focus: false\n      });\n      this.props.onBlur(e);\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          onChange = _this$props.onChange,\n          type = _this$props.type,\n          filled = _this$props.filled,\n          dense = _this$props.dense,\n          required = _this$props.required,\n          label = _this$props.label,\n          disabled = _this$props.disabled,\n          placeholder = _this$props.placeholder,\n          name = _this$props.name,\n          valid = _this$props.valid,\n          error = _this$props.error,\n          warning = _this$props.warning,\n          loading = _this$props.loading,\n          value = _this$props.value,\n          tabIndex = _this$props.tabIndex;\n    const focus = this.state.focus;\n    const Container = filled ? LabelFilled : LabelOutlined;\n    return React.createElement(Container, {\n      focus: focus,\n      label: label,\n      value: !!value || !!placeholder,\n      htmlFor: name,\n      required: required,\n      disabled: disabled,\n      valid: valid,\n      warning: warning,\n      error: error,\n      loading: loading,\n      dense: dense,\n      className: _JSXStyle.dynamic([[\"349714766\", [theme.disabled]]]) + \" \" + (className || \"\")\n    }, React.createElement(Input, {\n      focus: focus,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: onChange,\n      name: name,\n      type: type,\n      value: value || '',\n      placeholder: placeholder,\n      filled: filled,\n      disabled: disabled,\n      valid: valid,\n      warning: warning,\n      error: error,\n      loading: loading,\n      dense: dense,\n      tabIndex: tabIndex\n    }), React.createElement(_JSXStyle, {\n      id: \"349714766\",\n      dynamic: [theme.disabled]\n    }, [\"div.__jsx-style-dynamic-selector .disabled,div.__jsx-style-dynamic-selector .disabled::-webkit-input-placeholder{color:\".concat(theme.disabled, \";cursor:not-allowed;}\"), \"div.__jsx-style-dynamic-selector .disabled,div.__jsx-style-dynamic-selector .disabled::-moz-placeholder{color:\".concat(theme.disabled, \";cursor:not-allowed;}\"), \"div.__jsx-style-dynamic-selector .disabled,div.__jsx-style-dynamic-selector .disabled:-ms-input-placeholder{color:\".concat(theme.disabled, \";cursor:not-allowed;}\"), \"div.__jsx-style-dynamic-selector .disabled,div.__jsx-style-dynamic-selector .disabled::placeholder{color:\".concat(theme.disabled, \";cursor:not-allowed;}\")]));\n  }\n\n}\n\nInputField.defaultProps = {\n  type: 'text',\n  onBlur: () => {},\n  onFocus: () => {}\n};\nInputField.propTypes = {\n  onChange: propTypes.func.isRequired,\n  name: propTypes.string.isRequired,\n  label: propTypes.string.isRequired,\n  className: propTypes.string,\n  placeholder: propTypes.string,\n  value: propTypes.string,\n  tabIndex: propTypes.string,\n  required: propTypes.bool,\n  disabled: propTypes.bool,\n  filled: propTypes.bool,\n  dense: propTypes.bool,\n  valid: statusPropType,\n  warning: statusPropType,\n  error: statusPropType,\n  loading: propTypes.bool,\n  initialFocus: propTypes.bool,\n  onBlur: propTypes.func,\n  onFocus: propTypes.func,\n  type: propTypes.oneOf(['text', 'email', 'number', 'password', 'url'])\n};\nexport { InputField };","map":null,"metadata":{},"sourceType":"module"}