{"ast":null,"code":"import React from 'react';\n\nconst instanceOfComponentFactory = (Component, isRequired) => (props, propName) => {\n  const children = props[propName];\n  const count = React.Children.count(children);\n\n  if (isRequired && count === 0) {\n    return new Error(\"\".concat(propName, \" is required.\"));\n  }\n\n  if (count > 1) {\n    return new Error(\"Prop validator 'instanceOfComponent' expected 1 component instance, instead found \".concat(count, \".\"));\n  }\n\n  if (children.type !== Component) {\n    const componentName = Component.name || Component.displayName;\n    return new Error(\"Child at index \".concat(propName, \" is not an instance of component \").concat(componentName, \".\"));\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an instance of a certain component\n * @param {function} Component - The component that is expected\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { instanceOfComponent } from '@dhis2/prop-types'\n * import { Button } from './Button'\n *\n * const ButtonWrap = ({ children }) => <div>{children}</div>\n * // This would allow the ButtonWrap to be empty\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button)\n * }\n *\n * // Enforce presence of a Button instance\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button).isRequired\n * }\n */\n\n\nexport function instanceOfComponent(Component) {\n  const fn = instanceOfComponentFactory(Component, false);\n  fn.isRequired = instanceOfComponentFactory(Component, true);\n  return fn;\n}","map":null,"metadata":{},"sourceType":"module"}