{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { colors, theme } from '@dhis2/ui-core';\nimport { Email } from '../icons/Email.js';\nimport { Message } from '../icons/Message.js';\nconst messageIcon = {\n  styles: React.createElement(_JSXStyle, {\n    id: \"255544020\"\n  }, [\"svg.jsx-255544020{fill:\".concat(colors.white, \";cursor:pointer;height:24px;width:24px;}\")]),\n  className: \"jsx-255544020\"\n};\nconst interpretationIcon = {\n  styles: React.createElement(_JSXStyle, {\n    id: \"255544020\"\n  }, [\"svg.jsx-255544020{fill:\".concat(colors.white, \";cursor:pointer;height:24px;width:24px;}\")]),\n  className: \"jsx-255544020\"\n};\n\nfunction icon(kind) {\n  if (kind === 'message') {\n    return React.createElement(Message, {\n      className: messageIcon.className\n    }, messageIcon.styles);\n  } else {\n    return React.createElement(Email, {\n      className: interpretationIcon.className\n    }, interpretationIcon.styles);\n  }\n}\n\nexport const NotificationIcon = ({\n  count,\n  href,\n  kind,\n  dataTestId\n}) => React.createElement(\"a\", {\n  href: href,\n  \"data-test-id\": dataTestId,\n  className: _JSXStyle.dynamic([[\"1854025327\", [theme.secondary300]]]) + \" \" + (kind || \"\")\n}, icon(kind), count > 0 && React.createElement(\"span\", {\n  \"data-test-id\": \"\".concat(dataTestId, \"-count\"),\n  className: _JSXStyle.dynamic([[\"1854025327\", [theme.secondary300]]])\n}, count), React.createElement(_JSXStyle, {\n  id: \"1854025327\",\n  dynamic: [theme.secondary300]\n}, [\"a.__jsx-style-dynamic-selector{position:relative;margin:8px 24px 0 0;cursor:pointer;}\", \"span.__jsx-style-dynamic-selector{z-index:1;position:absolute;top:-6px;right:-10px;width:16px;height:16px;border-radius:50%;background-color:\".concat(theme.secondary300, \";color:#fff;font-size:9px;font-weight:500;line-height:16px;text-align:center;cursor:inherit;}\")]));\nNotificationIcon.defaultProps = {\n  count: 0\n};\nNotificationIcon.propTypes = {\n  kind: PropTypes.oneOf(['interpretation', 'message']),\n  href: PropTypes.string.isRequired,\n  count: PropTypes.number,\n  dataTestId: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}