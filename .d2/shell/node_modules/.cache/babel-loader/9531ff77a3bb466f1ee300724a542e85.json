{"ast":null,"code":"import _slicedToArray from \"/home/theinscriber/.cache/yarn/v6/npm-@babel-runtime-7.6.0-4fc1d642a9fd0299754e8b5de62c631cf5568205-integrity/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useRef, useState, useEffect, useCallback, useContext } from 'react';\n\nconst getMutationFetchType = mutation => mutation.type === 'update' ? mutation.partial ? 'update' : 'replace' : mutation.type;\n\nconst resolveDynamicQuery = ({\n  resource,\n  id,\n  data,\n  params\n}, variables) => ({\n  resource,\n  id: typeof id === 'function' ? id(variables) : id,\n  data: typeof data === 'function' ? data(variables) : data,\n  params: typeof params === 'function' ? params(variables) : params\n});\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass InvalidQueryError extends Error {\n  constructor(errors) {\n    super(\"Invalid query\\n\".concat(errors.map(e => ' - ' + e).join('\\n')));\n\n    _defineProperty(this, \"type\", 'invalid-query');\n\n    _defineProperty(this, \"details\", void 0);\n\n    this.details = errors;\n  }\n\n}\n\nconst validQueryKeys = ['resource', 'id', 'params', 'data'];\nconst validTypes = ['read', 'create', 'update', 'replace', 'delete'];\n\nconst getResourceQueryErrors = (type, query) => {\n  if (!validTypes.includes(type)) {\n    return [\"Unknown query or mutation type \".concat(type)];\n  }\n\n  if (typeof query !== 'object') {\n    return ['A query or mutation must be a javascript object'];\n  }\n\n  const errors = [];\n\n  if (!query.resource || typeof query.resource !== 'string') {\n    errors.push('Property resource must be a string');\n  }\n\n  if (type === 'create' && query.id) {\n    errors.push(\"Mutation type 'create' does not support property 'id'\");\n  }\n\n  if (query.id && typeof query.id !== 'string') {\n    errors.push('Property id must be a string');\n  }\n\n  if (query.params && typeof query.params !== 'object') {\n    errors.push('Property params must be an object');\n  }\n\n  if (type === 'delete' && query.data) {\n    errors.push(\"Mutation type 'delete' does not support property 'data'\");\n  }\n\n  const invalidKeys = Object.keys(query).filter(k => !validQueryKeys.includes(k));\n  invalidKeys.forEach(k => {\n    errors.push(\"Property \".concat(k, \" is not supported\"));\n  });\n  return errors;\n};\n\nconst validateResourceQueries = (queries, names = []) => {\n  if (names.length !== queries.length) {\n    for (let i = names.length; i < queries.length; ++i) {\n      names.push('query#' + i);\n    }\n  }\n\n  const errors = queries.reduce((errors, query, i) => errors.concat(getResourceQueryErrors('read', query).map(e => \"[\".concat(names[i], \"] \").concat(e))), []);\n\n  if (errors.length) {\n    throw new InvalidQueryError(errors);\n  }\n};\n\nconst validateResourceQuery = (type, query) => {\n  const errors = getResourceQueryErrors(type, query);\n\n  if (errors.length) {\n    throw new InvalidQueryError(errors);\n  }\n};\n\nfunction _defineProperty$1(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst reduceResponses = (responses, names) => responses.reduce((out, response, idx) => {\n  out[names[idx]] = response;\n  return out;\n}, {});\n\nclass DataEngine {\n  constructor(link) {\n    _defineProperty$1(this, \"link\", void 0);\n\n    this.link = link;\n  }\n\n  query(query, {\n    variables = {},\n    signal,\n    onComplete,\n    onError\n  } = {}) {\n    const names = Object.keys(query);\n    const queries = names.map(name => query[name]).map(q => resolveDynamicQuery(q, variables));\n    validateResourceQueries(queries, names);\n    return Promise.all(queries.map(q => {\n      return this.link.executeResourceQuery('read', q, {\n        signal\n      });\n    })).then(results => {\n      const data = reduceResponses(results, names);\n      onComplete && onComplete(data);\n      return data;\n    }).catch(error => {\n      onError && onError(error);\n      throw error;\n    });\n  }\n\n  mutate(mutation, {\n    variables = {},\n    signal,\n    onComplete,\n    onError\n  } = {}) {\n    const query = resolveDynamicQuery(mutation, variables);\n    const type = getMutationFetchType(mutation);\n    validateResourceQuery(type, query);\n    const result = this.link.executeResourceQuery(type, query, {\n      signal\n    });\n    return result.then(data => {\n      onComplete && onComplete(data);\n      return data;\n    }).catch(error => {\n      onError && onError(error);\n      throw error;\n    });\n  }\n\n}\n\nfunction _defineProperty$2(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass FetchError extends Error {\n  constructor({\n    message,\n    type,\n    details\n  }) {\n    super(message);\n\n    _defineProperty$2(this, \"type\", void 0);\n\n    _defineProperty$2(this, \"details\", void 0);\n\n    this.type = type;\n    this.details = details;\n  }\n\n}\n\nfunction _defineProperty$3(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass CustomDataLink {\n  constructor(customData, {\n    failOnMiss = true,\n    loadForever = false\n  } = {}) {\n    _defineProperty$3(this, \"failOnMiss\", void 0);\n\n    _defineProperty$3(this, \"loadForever\", void 0);\n\n    _defineProperty$3(this, \"data\", void 0);\n\n    this.data = customData;\n    this.failOnMiss = failOnMiss;\n    this.loadForever = loadForever;\n  }\n\n  async executeResourceQuery(type, query, options) {\n    if (this.loadForever) {\n      return new Promise(() => {});\n    }\n\n    const customResource = this.data[query.resource];\n\n    if (!customResource) {\n      if (this.failOnMiss) {\n        throw new Error(\"No data provided for resource type \".concat(query.resource, \"!\"));\n      }\n\n      return Promise.resolve(null);\n    }\n\n    switch (typeof customResource) {\n      case 'string':\n      case 'number':\n      case 'boolean':\n      case 'object':\n        return customResource;\n\n      case 'function':\n        const result = await customResource(type, query, options);\n\n        if (typeof result === 'undefined' && this.failOnMiss) {\n          throw new Error(\"The custom function for resource \".concat(query.resource, \" must always return a value but returned \").concat(result));\n        }\n\n        return result || null;\n    }\n  }\n\n}\n\nfunction _defineProperty$4(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass ErrorLink {\n  constructor(errorMessage) {\n    _defineProperty$4(this, \"errorMessage\", void 0);\n\n    this.errorMessage = errorMessage;\n  }\n\n  executeResourceQuery() {\n    console.error(this.errorMessage);\n    return Promise.reject(this.errorMessage);\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty$5(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty$5(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst parseContentType = contentType => {\n  return contentType ? contentType.split(';')[0].trim().toLowerCase() : null;\n};\n\nconst parseStatus = async response => {\n  if (response.status === 401 || response.status === 403 || response.status === 409) {\n    const message = await response.json().then(body => {\n      return body.message;\n    }).catch(() => {\n      return response.status === 401 ? 'Unauthorized' : 'Forbidden';\n    });\n    throw new FetchError({\n      type: 'access',\n      message,\n      details: response\n    });\n  }\n\n  if (response.status < 200 || response.status >= 400) {\n    throw new FetchError({\n      type: 'unknown',\n      message: \"An unknown error occurred - \".concat(response.statusText, \" (\").concat(response.status, \")\"),\n      details: response\n    });\n  }\n\n  return response;\n};\n\nfunction fetchData(url, options = {}) {\n  return fetch(url, _objectSpread({}, options, {\n    credentials: 'include',\n    headers: _objectSpread({\n      'X-Requested-With': 'XMLHttpRequest',\n      Accept: 'application/json'\n    }, options.headers)\n  })).catch(err => {\n    throw new FetchError({\n      type: 'network',\n      message: 'An unknown network error occurred',\n      details: err\n    });\n  }).then(parseStatus).then(async response => {\n    if (parseContentType(response.headers.get('Content-Type')) === 'application/json') {\n      return await response.json(); // Will throw if invalid JSON!\n    }\n\n    return await response.text();\n  });\n}\n\nconst joinPath = (...parts) => {\n  const realParts = parts.filter(part => !!part);\n  return realParts.map(part => part.replace(/^\\/+|\\/+$/g, '')).join('/');\n};\n\nconst getMethod = type => {\n  switch (type) {\n    case 'create':\n      return 'POST';\n\n    case 'read':\n      return 'GET';\n\n    case 'update':\n      return 'PATCH';\n\n    case 'replace':\n      return 'PUT';\n\n    case 'delete':\n      return 'DELETE';\n  }\n};\n\nconst queryToRequestOptions = (type, {\n  data\n}, signal) => ({\n  method: getMethod(type),\n  body: data ? JSON.stringify(data) : undefined,\n  headers: data ? {\n    'Content-Type': 'application/json'\n  } : undefined,\n  signal\n});\n\nconst encodeQueryParameter = param => {\n  if (Array.isArray(param)) {\n    return param.map(encodeQueryParameter).join(',');\n  }\n\n  if (typeof param === 'string') {\n    return encodeURIComponent(param);\n  }\n\n  if (typeof param === 'number') {\n    return String(param);\n  }\n\n  if (typeof param === 'object') {\n    throw new Error('Object parameter mappings not yet implemented');\n  }\n\n  throw new Error('Unknown parameter type');\n};\n\nconst queryParametersToQueryString = params => Object.keys(params).filter(key => key && params[key]).map(key => \"\".concat(encodeURIComponent(key), \"=\").concat(encodeQueryParameter(params[key]))).join('&');\n\nconst actionPrefix = 'action::';\n\nconst isAction = resource => resource.startsWith(actionPrefix);\n\nconst makeActionPath = resource => joinPath('dhis-web-commons', \"\".concat(resource.substr(actionPrefix.length), \".action\"));\n\nconst queryToResourcePath = (apiPath, {\n  resource,\n  id,\n  params = {}\n}) => {\n  const base = isAction(resource) ? makeActionPath(resource) : joinPath(apiPath, resource, id);\n\n  if (Object.keys(params).length) {\n    return \"\".concat(base, \"?\").concat(queryParametersToQueryString(params));\n  }\n\n  return base;\n};\n\nfunction _defineProperty$6(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass RestAPILink {\n  constructor({\n    baseUrl,\n    apiVersion\n  }) {\n    _defineProperty$6(this, \"apiPath\", void 0);\n\n    _defineProperty$6(this, \"baseUrl\", void 0);\n\n    _defineProperty$6(this, \"apiVersion\", void 0);\n\n    this.baseUrl = baseUrl;\n    this.apiVersion = apiVersion;\n    this.apiPath = joinPath('api', String(apiVersion));\n  }\n\n  fetch(path, options) {\n    return fetchData(joinPath(this.baseUrl, path), options);\n  }\n\n  executeResourceQuery(type, query, {\n    signal\n  }) {\n    return this.fetch(queryToResourcePath(this.apiPath, query), queryToRequestOptions(type, query, signal));\n  }\n\n}\n\nconst errorMessage = 'DHIS2 data context must be initialized, please ensure that you include a <DataProvider> in your application';\nconst link = new ErrorLink(errorMessage);\nconst engine = new DataEngine(link);\nconst defaultContext = {\n  engine\n};\nconst DataContext = React.createContext(defaultContext);\n\nconst CustomDataProvider = ({\n  children,\n  data,\n  options\n}) => {\n  const link = new CustomDataLink(data, options);\n  const engine = new DataEngine(link);\n  const context = {\n    engine\n  };\n  return React.createElement(DataContext.Provider, {\n    value: context\n  }, children);\n};\n\nconst useStaticInput = (staticValue, {\n  warn = false,\n  name = 'input'\n} = {}) => {\n  const originalValue = useRef(staticValue);\n\n  const _useState = useState(() => originalValue.current),\n        _useState2 = _slicedToArray(_useState, 2),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n  useEffect(() => {\n    if (warn && originalValue.current !== staticValue) {\n      console.warn(\"The \".concat(name, \" should be static, don't create it within the render loop!\"));\n    }\n  }, [warn, staticValue, originalValue, name]);\n  return [value, setValue];\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(source, true).forEach(function (key) {\n        _defineProperty$7(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty$7(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst useQueryExecutor = ({\n  execute,\n  variables: initialVariables,\n  singular,\n  immediate,\n  onComplete,\n  onError\n}) => {\n  const _useStaticInput = useStaticInput(execute),\n        _useStaticInput2 = _slicedToArray(_useStaticInput, 1),\n        theExecute = _useStaticInput2[0];\n\n  const _useState3 = useState({\n    called: !!immediate,\n    loading: !!immediate\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        state = _useState4[0],\n        setState = _useState4[1];\n\n  const variables = useRef(initialVariables);\n  const abortControllersRef = useRef([]);\n  const abort = useCallback(() => {\n    abortControllersRef.current.forEach(controller => controller.abort());\n    abortControllersRef.current = [];\n  }, []);\n  const manualAbort = useCallback(() => {\n    abort();\n    setState(state => ({\n      called: state.called,\n      loading: false,\n      error: new FetchError({\n        type: 'aborted',\n        message: 'Aborted'\n      })\n    }));\n  }, [abort]);\n  const refetch = useCallback((newVariables = {}) => {\n    setState(state => !state.called || !state.loading ? {\n      called: true,\n      loading: true\n    } : state);\n\n    if (singular) {\n      abort(); // Cleanup any in-progress fetches\n    }\n\n    const controller = new AbortController();\n    abortControllersRef.current.push(controller);\n    variables.current = _objectSpread$1({}, variables.current, {}, newVariables);\n    const options = {\n      variables: variables.current,\n      signal: controller.signal,\n      onComplete,\n      onError\n    };\n    return theExecute(options).then(data => {\n      if (!controller.signal.aborted) {\n        setState({\n          called: true,\n          loading: false,\n          data\n        });\n        return data;\n      }\n\n      return new Promise(() => {});\n    }).catch(error => {\n      if (!controller.signal.aborted) {\n        setState({\n          called: true,\n          loading: false,\n          error\n        });\n      }\n\n      return new Promise(() => {}); // Don't throw errors in refetch promises, wait forever\n    });\n  }, [abort, onComplete, onError, singular, theExecute]); // Don't include immediate or refetch as deps, otherwise unintentional refetches\n  // may be triggered by changes to input, i.e. recreating the onComplete callback\n\n  useEffect(() => {\n    if (immediate) {\n      refetch();\n    }\n\n    return abort;\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return _objectSpread$1({\n    refetch,\n    abort: manualAbort\n  }, state);\n};\n\nconst useDataEngine = () => {\n  const context = useContext(DataContext);\n  return context.engine;\n};\n\nconst empty = {};\n\nconst useDataMutation = (mutation, {\n  onComplete,\n  onError,\n  variables = empty\n} = {}) => {\n  const engine = useDataEngine();\n\n  const _useStaticInput3 = useStaticInput(mutation, {\n    warn: true,\n    name: 'mutation'\n  }),\n        _useStaticInput4 = _slicedToArray(_useStaticInput3, 1),\n        theMutation = _useStaticInput4[0];\n\n  const execute = useCallback(options => engine.mutate(theMutation, options), [engine, theMutation]);\n\n  const _useQueryExecutor = useQueryExecutor({\n    execute,\n    variables,\n    singular: false,\n    immediate: false,\n    onComplete,\n    onError\n  }),\n        mutate = _useQueryExecutor.refetch,\n        called = _useQueryExecutor.called,\n        loading = _useQueryExecutor.loading,\n        error = _useQueryExecutor.error,\n        data = _useQueryExecutor.data;\n\n  return [mutate, {\n    engine,\n    called,\n    loading,\n    error,\n    data\n  }];\n};\n\nconst DataMutation = ({\n  mutation,\n  onComplete,\n  onError,\n  variables,\n  children\n}) => {\n  const mutationState = useDataMutation(mutation, {\n    onComplete,\n    onError,\n    variables\n  });\n  return children(mutationState);\n};\n\nconst ConfigContext = React.createContext({\n  baseUrl: '..',\n  apiVersion: 32\n});\n\nconst useConfig = () => useContext(ConfigContext);\n\nconst makeContext = config => config;\n\nconst ConfigProvider = ({\n  config,\n  children\n}) => React.createElement(ConfigContext.Provider, {\n  value: makeContext(config)\n}, children);\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$2(source, true).forEach(function (key) {\n        _defineProperty$8(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty$8(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst DataProvider = props => {\n  const config = _objectSpread$2({}, useConfig(), {}, props);\n\n  const link = new RestAPILink(config);\n  const engine = new DataEngine(link);\n  const context = {\n    engine\n  };\n  return React.createElement(DataContext.Provider, {\n    value: context\n  }, props.children);\n};\n\nconst empty$1 = {};\n\nconst useDataQuery = (query, {\n  onComplete,\n  onError,\n  variables = empty$1\n} = {}) => {\n  const engine = useDataEngine();\n\n  const _useStaticInput5 = useStaticInput(query, {\n    warn: true,\n    name: 'query'\n  }),\n        _useStaticInput6 = _slicedToArray(_useStaticInput5, 1),\n        theQuery = _useStaticInput6[0];\n\n  const execute = useCallback(options => engine.query(theQuery, options), [engine, theQuery]);\n\n  const _useQueryExecutor2 = useQueryExecutor({\n    execute,\n    variables,\n    singular: true,\n    immediate: true,\n    onComplete,\n    onError\n  }),\n        refetch = _useQueryExecutor2.refetch,\n        loading = _useQueryExecutor2.loading,\n        error = _useQueryExecutor2.error,\n        data = _useQueryExecutor2.data;\n\n  return {\n    engine,\n    refetch,\n    loading,\n    error,\n    data\n  };\n};\n\nconst DataQuery = ({\n  query,\n  onComplete,\n  onError,\n  variables,\n  children\n}) => {\n  const queryState = useDataQuery(query, {\n    onComplete,\n    onError,\n    variables\n  });\n  return children(queryState);\n};\n\nvar Provider = function Provider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  return React.createElement(ConfigProvider, {\n    config: config\n  }, React.createElement(DataProvider, null, children));\n};\n\nProvider.displayName = 'DHIS2RuntimeProvider';\nexport { CustomDataProvider, DataMutation, DataProvider, DataQuery, Provider, useConfig, useDataEngine, useDataMutation, useDataQuery };","map":null,"metadata":{},"sourceType":"module"}