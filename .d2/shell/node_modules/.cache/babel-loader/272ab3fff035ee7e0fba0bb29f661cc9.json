{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { LabelFilled, LabelOutlined } from '../FieldLabel';\nimport { ArrowDown } from '../icons/Arrow';\nimport { Select } from './Select';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(ArrowDown, null);\n\nconst TailIcon = () => React.createElement(\"div\", {\n  className: \"jsx-3487810764\"\n}, _ref, React.createElement(_JSXStyle, {\n  id: \"3487810764\"\n}, [\"div.jsx-3487810764{pointer-events:none;position:absolute;right:4px;}\"]));\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(TailIcon, null);\n\nclass SelectField extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      focus: this.props.initialFocus\n    });\n\n    _defineProperty(this, \"onFocus\", e => {\n      this.setState({\n        focus: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n    });\n\n    _defineProperty(this, \"onBlur\", e => {\n      this.setState({\n        focus: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    });\n  }\n\n  isFocused() {\n    return this.state.focus;\n  }\n\n  render() {\n    const _this$props = this.props,\n          filled = _this$props.filled,\n          dense = _this$props.dense,\n          required = _this$props.required,\n          label = _this$props.label,\n          disabled = _this$props.disabled,\n          name = _this$props.name,\n          valid = _this$props.valid,\n          error = _this$props.error,\n          warning = _this$props.warning,\n          loading = _this$props.loading,\n          children = _this$props.children,\n          value = _this$props.value,\n          tabIndex = _this$props.tabIndex,\n          onChange = _this$props.onChange;\n    const focus = this.state.focus;\n    const Container = filled ? LabelFilled : LabelOutlined;\n    return React.createElement(Container, {\n      focus: focus,\n      label: label,\n      value: !!value,\n      htmlFor: name,\n      required: required,\n      disabled: disabled,\n      valid: valid,\n      warning: warning,\n      error: error,\n      loading: loading,\n      dense: dense\n    }, React.createElement(Select, {\n      focus: focus,\n      name: name,\n      value: value,\n      disabled: disabled,\n      filled: filled,\n      dense: dense,\n      tabIndex: tabIndex,\n      onChange: onChange,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur\n    }, children), _ref2);\n  }\n\n}\n\nSelectField.propTypes = {\n  name: propTypes.string.isRequired,\n  onChange: propTypes.func.isRequired,\n  label: propTypes.string.isRequired,\n  value: propTypes.string,\n  className: propTypes.string,\n  tabIndex: propTypes.string,\n  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.shape({\n    tagName: propTypes.oneOf(['OPTION', 'OPTGROUP'])\n  })), propTypes.shape({\n    tagName: propTypes.oneOf(['OPTION', 'OPTGROUP'])\n  })]),\n  required: propTypes.bool,\n  disabled: propTypes.bool,\n  filled: propTypes.bool,\n  dense: propTypes.bool,\n  valid: statusPropType,\n  warning: statusPropType,\n  error: statusPropType,\n  loading: propTypes.bool,\n  initialFocus: propTypes.bool,\n  onFocus: propTypes.func,\n  onBlur: propTypes.func\n};\nexport { SelectField };","map":null,"metadata":{},"sourceType":"module"}