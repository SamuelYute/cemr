{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\nimport propTypes from 'prop-types';\nimport React, { Component, createRef } from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { SwitchIcon } from '../icons/Switch.js';\nimport styles from './styles';\nconst Input = React.forwardRef(({\n  name,\n  disabled,\n  checked,\n  onChange,\n  onFocus,\n  onBlur\n}, ref) => React.createElement(\"div\", {\n  className: \"jsx-1102028186\"\n}, React.createElement(\"input\", {\n  type: \"checkbox\",\n  ref: ref,\n  name: name,\n  disabled: disabled,\n  checked: checked,\n  onChange: onChange,\n  onFocus: onFocus,\n  onBlur: onBlur,\n  className: \"jsx-1102028186\"\n}), React.createElement(_JSXStyle, {\n  id: \"1102028186\"\n}, [\"div.jsx-1102028186{height:0;width:0;overflow:hidden;}\"])));\n\nclass Switch extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ref\", createRef());\n\n    _defineProperty(this, \"state\", {\n      focus: this.props.initialFocus\n    });\n\n    _defineProperty(this, \"onFocus\", e => {\n      this.setState({\n        focus: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n    });\n\n    _defineProperty(this, \"onBlur\", e => {\n      this.setState({\n        focus: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    });\n  }\n\n  componentDidMount() {\n    if (this.state.focus) {\n      this.ref.current.focus();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          onChange = _this$props.onChange,\n          name = _this$props.name,\n          className = _this$props.className,\n          label = _this$props.label,\n          required = _this$props.required,\n          _this$props$checked = _this$props.checked,\n          checked = _this$props$checked === void 0 ? false : _this$props$checked,\n          disabled = _this$props.disabled,\n          valid = _this$props.valid,\n          warning = _this$props.warning,\n          error = _this$props.error;\n    const focus = this.state.focus;\n    return React.createElement(\"label\", {\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx(className, {\n        disabled,\n        focus\n      }) || \"\")\n    }, React.createElement(Input, {\n      ref: this.ref,\n      name: name,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus,\n      checked: checked,\n      disabled: disabled,\n      onChange: onChange\n    }), React.createElement(SwitchIcon, {\n      checked: checked,\n      disabled: disabled,\n      valid: valid,\n      warning: warning,\n      error: error,\n      focus: focus\n    }), React.createElement(\"span\", {\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx({\n        required,\n        disabled\n      }) || \"\")\n    }, label), React.createElement(_JSXStyle, {\n      id: styles.__hash\n    }, styles));\n  }\n\n}\n\nSwitch.propTypes = {\n  onChange: propTypes.func.isRequired,\n  name: propTypes.string.isRequired,\n  className: propTypes.string,\n  label: propTypes.string,\n  required: propTypes.bool,\n  checked: propTypes.bool,\n  disabled: propTypes.bool,\n  valid: statusPropType,\n  warning: statusPropType,\n  error: statusPropType,\n  initialFocus: propTypes.bool,\n  onFocus: propTypes.func,\n  onBlur: propTypes.func\n};\nexport { Switch };","map":null,"metadata":{},"sourceType":"module"}