{"ast":null,"code":"import propTypes from 'prop-types';\n\nconst arrayWithLengthFactory = ({\n  min = 0,\n  max = Infinity,\n  propType,\n  isRequired\n}) => (props, propName, componentName) => {\n  const arr = props[propName];\n\n  if (isRequired && typeof arr === 'undefined') {\n    return new Error(\"\".concat(propName, \" is required.\"));\n  }\n\n  if (arr && !Array.isArray(arr)) {\n    return new Error(\"\".concat(propName, \" is not an array.\"));\n  }\n\n  if (arr && arr.length > max) {\n    return new Error( // prettier-ignore\n    \"\".concat(propName, \" array has a length of \").concat(arr.length, \", but the maximum is \").concat(max));\n  }\n\n  if (arr && arr.length < min) {\n    return new Error( // prettier-ignore\n    \"\".concat(propName, \" array has a length of \").concat(arr.length, \", but the minimum is \").concat(min));\n  }\n\n  if (arr && propType) {\n    const len = arr.length;\n\n    for (let i = 0; i < len; i++) {\n      propTypes.checkPropTypes({\n        [i]: propType\n      }, arr, propName, componentName);\n    }\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an array with a length between a minimum and maximum.\n * If a third `propType` argument is passed each item in the array needs to be of that prop-type\n * @param {number} [min=0] - The minimal array length\n * @param {number} [max=Infinity] - The maximal array length\n * @param {function} [propType] - The prop-type that each array item needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { arrayWithLength } from '@dhis2/prop-types'\n *\n * const LotsOfLists = props => <div {...props}>Does nothing</div>\n *\n * LotsOfLists.propTypes = {\n *     arrayWithMaxThreeNumbers: arrayWithLength(0, 3, propTypes.number),\n *     arrayWithAtLeastSixStrings: arrayWithLength(6, undefined, propTypes.string),\n *     arrayWithAtLeastTenItems: arrayWithLength(10),\n *     mandatoryArrayBetweenOneAndTen: arrayWithLength(1,10).isRequired,\n * }\n */\n\n\nexport function arrayWithLength(min, max, propType) {\n  const fn = arrayWithLengthFactory({\n    min,\n    max,\n    propType,\n    isRequired: false\n  });\n  fn.isRequired = arrayWithLengthFactory({\n    min,\n    max,\n    propType,\n    isRequired: true\n  });\n  return fn;\n}","map":null,"metadata":{},"sourceType":"module"}