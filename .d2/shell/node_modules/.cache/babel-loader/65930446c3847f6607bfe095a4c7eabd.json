{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component, Fragment, createRef } from 'react';\nimport propTypes from 'prop-types';\nexport class Input extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ref\", createRef());\n  }\n\n  componentDidMount() {\n    if (this.props.focus) {\n      this.ref.current.focus();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          onChange = _this$props.onChange,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          name = _this$props.name,\n          value = _this$props.value,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          tabIndex = _this$props.tabIndex;\n    return React.createElement(\"div\", {\n      className: \"jsx-3255790221\"\n    }, React.createElement(\"input\", {\n      ref: this.ref,\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      onChange: onChange,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      checked: checked,\n      disabled: disabled,\n      tabIndex: tabIndex,\n      className: \"jsx-3255790221\"\n    }), React.createElement(_JSXStyle, {\n      id: \"3255790221\"\n    }, [\"div.jsx-3255790221{width:0;height:0;overflow:hidden;}\"]));\n  }\n\n}\nInput.propTypes = {\n  onChange: propTypes.func.isRequired,\n  name: propTypes.string.isRequired,\n  tabIndex: propTypes.string,\n  onFocus: propTypes.func,\n  onBlur: propTypes.func,\n  checked: propTypes.bool,\n  disabled: propTypes.bool,\n  focus: propTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}