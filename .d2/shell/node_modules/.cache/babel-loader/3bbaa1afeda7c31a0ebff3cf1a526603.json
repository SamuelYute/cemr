{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { theme } from '../theme.js';\nimport { Icon } from './Icon';\nimport { Input } from './Input';\nimport { Label } from './Label';\n\nclass Checkbox extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onFocus\", e => {\n      this.setState({\n        focus: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n    });\n\n    _defineProperty(this, \"onBlur\", e => {\n      this.setState({\n        focus: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    });\n\n    this.state = {\n      focus: props.initialFocus\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          _this$props$checked = _this$props.checked,\n          checked = _this$props$checked === void 0 ? false : _this$props$checked,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          error = _this$props.error,\n          icon = _this$props.icon,\n          indeterminate = _this$props.indeterminate,\n          label = _this$props.label,\n          name = _this$props.name,\n          onChange = _this$props.onChange,\n          required = _this$props.required,\n          tabIndex = _this$props.tabIndex,\n          valid = _this$props.valid,\n          value = _this$props.value,\n          warning = _this$props.warning;\n    const focus = this.state.focus;\n    return React.createElement(Fragment, null, React.createElement(\"label\", {\n      className: _JSXStyle.dynamic([[\"261820537\", [theme.disabled]]]) + \" \" + (cx('base', className, {\n        disabled,\n        focus\n      }) || \"\")\n    }, React.createElement(Input, {\n      name: name,\n      value: value,\n      checked: checked,\n      disabled: disabled,\n      focus: focus,\n      onChange: onChange,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      tabIndex: tabIndex\n    }), React.createElement(Icon, {\n      focus: focus,\n      checked: checked,\n      disabled: disabled,\n      valid: valid,\n      error: error,\n      warning: warning,\n      indeterminate: indeterminate\n    }), icon, React.createElement(Label, {\n      required: required,\n      disabled: disabled\n    }, label), React.createElement(_JSXStyle, {\n      id: \"261820537\",\n      dynamic: [theme.disabled]\n    }, [\"label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}\", \".disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:\".concat(theme.disabled, \";}\"), \".focus.__jsx-style-dynamic-selector{outline:1px;}\"])));\n  }\n\n}\n\nCheckbox.propTypes = {\n  onChange: propTypes.func.isRequired,\n  value: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  label: propTypes.string.isRequired,\n  tabIndex: propTypes.string,\n  className: propTypes.string,\n  onFocus: propTypes.func,\n  onBlur: propTypes.func,\n  icon: propTypes.element,\n  indeterminate: propTypes.bool,\n  required: propTypes.bool,\n  checked: propTypes.bool,\n  disabled: propTypes.bool,\n  valid: statusPropType,\n  warning: statusPropType,\n  error: statusPropType,\n  initialFocus: propTypes.bool\n};\nexport { Checkbox };","map":null,"metadata":{},"sourceType":"module"}