{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent, createRef } from 'react';\nimport propTypes from 'prop-types';\nimport cx from 'classnames';\nimport { ChevronLeft, ChevronRight } from '../icons/Chevron';\nimport { colors } from '../theme';\nimport { detectHorizontalScrollbarHeight } from './detectHorizontalScrollbarHeight';\nimport { animatedSideScroll } from './animatedSideScroll';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(ChevronLeft, null);\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(ChevronRight, null);\n\nclass ScrollBar extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"scrollBox\", createRef());\n\n    _defineProperty(this, \"scrollArea\", createRef());\n\n    _defineProperty(this, \"state\", {\n      scrolledToStart: false,\n      scrolledToEnd: false\n    });\n\n    _defineProperty(this, \"horizontalScrollBarHeight\", detectHorizontalScrollbarHeight());\n\n    _defineProperty(this, \"scrollRight\", () => this.scroll());\n\n    _defineProperty(this, \"scrollLeft\", () => this.scroll(true));\n\n    _defineProperty(this, \"animatedScrollCallback\", () => {\n      this.toggleScrollButtonVisibility();\n      this.attachSideScrollListener();\n    });\n\n    _defineProperty(this, \"toggleScrollButtonVisibility\", () => {\n      const _this$scrollBox$curre = this.scrollBox.current,\n            scrollLeft = _this$scrollBox$curre.scrollLeft,\n            offsetWidth = _this$scrollBox$curre.offsetWidth;\n      const areaOffsetWidth = this.scrollArea.current.offsetWidth;\n      const scrolledToStart = scrollLeft <= 0;\n      const scrolledToEnd = scrollLeft + offsetWidth >= areaOffsetWidth;\n\n      if (this.state.scrolledToStart !== scrolledToStart || this.state.scrolledToEnd !== scrolledToEnd) {\n        this.setState({\n          scrolledToStart,\n          scrolledToEnd\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.scrollSelectedTabIntoView();\n    this.attachSideScrollListener();\n  }\n\n  componentWillUnmount() {\n    this.removeSideScrollListener();\n  }\n\n  scroll(goBackwards) {\n    this.removeSideScrollListener();\n    animatedSideScroll(this.scrollBox.current, this.animatedScrollCallback, goBackwards);\n  }\n\n  scrollSelectedTabIntoView() {\n    const scrollBoxEl = this.scrollBox.current;\n    const tab = scrollBoxEl.querySelector('.tab.selected');\n\n    if (tab) {\n      const tabEnd = tab.offsetLeft + tab.offsetWidth;\n\n      if (tabEnd > scrollBoxEl.offsetWidth) {\n        scrollBoxEl.scrollLeft = tabEnd - scrollBoxEl.offsetWidth;\n      }\n    }\n  }\n\n  attachSideScrollListener() {\n    this.scrollBox.current.addEventListener('scroll', this.toggleScrollButtonVisibility);\n  }\n\n  removeSideScrollListener() {\n    this.scrollBox.current.removeEventListener('scroll', this.toggleScrollButtonVisibility);\n  }\n\n  render() {\n    const _this$state = this.state,\n          scrolledToStart = _this$state.scrolledToStart,\n          scrolledToEnd = _this$state.scrolledToEnd;\n    const children = this.props.children;\n    return React.createElement(\"div\", {\n      className: \"jsx-4061674243 \" + _JSXStyle.dynamic([[\"1341056994\", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + \" \" + \"scroll-bar\"\n    }, React.createElement(\"button\", {\n      onClick: scrolledToStart ? undefined : this.scrollLeft,\n      className: \"jsx-4061674243 \" + _JSXStyle.dynamic([[\"1341056994\", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + \" \" + (cx('scroll-button', {\n        disabled: scrolledToStart\n      }) || \"\")\n    }, _ref), React.createElement(\"div\", {\n      className: \"jsx-4061674243 \" + _JSXStyle.dynamic([[\"1341056994\", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + \" \" + \"scroll-box-clipper\"\n    }, React.createElement(\"div\", {\n      ref: this.scrollBox,\n      className: \"jsx-4061674243 \" + _JSXStyle.dynamic([[\"1341056994\", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + \" \" + \"scroll-box\"\n    }, React.createElement(\"div\", {\n      ref: this.scrollArea,\n      className: \"jsx-4061674243 \" + _JSXStyle.dynamic([[\"1341056994\", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + \" \" + \"scroll-area\"\n    }, children))), React.createElement(\"button\", {\n      onClick: scrolledToEnd ? undefined : this.scrollRight,\n      className: \"jsx-4061674243 \" + _JSXStyle.dynamic([[\"1341056994\", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + \" \" + (cx('scroll-button', {\n        disabled: scrolledToEnd\n      }) || \"\")\n    }, _ref2), React.createElement(_JSXStyle, {\n      id: \"4061674243\"\n    }, [\".scroll-box.jsx-4061674243{margin-bottom:\".concat(-this.horizontalScrollBarHeight, \"px;}\")]), React.createElement(_JSXStyle, {\n      id: \"1341056994\",\n      dynamic: [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]\n    }, [\".scroll-bar.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}\", \".scroll-button.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:inherit;background-color:\".concat(colors.white, \";border:none;border-bottom:1px solid \").concat(colors.grey400, \";outline:none;padding:16px 16px 11px 16px;cursor:pointer;}\"), \".scroll-button.__jsx-style-dynamic-selector svg{width:20px;height:20px;fill:\".concat(colors.grey600, \";-webkit-transition:opacity 150ms ease-in-out;transition:opacity 150ms ease-in-out;opacity:1;}\"), \".scroll-button.__jsx-style-dynamic-selector:hover{background-color:\".concat(colors.grey100, \";}\"), \".scroll-button.__jsx-style-dynamic-selector:active{background-color:\".concat(colors.grey200, \";}\"), \".scroll-button.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;}\", \".scroll-button.disabled.__jsx-style-dynamic-selector:hover{background-color:transparent;}\", \".scroll-button.disabled.__jsx-style-dynamic-selector svg{fill:\".concat(colors.grey500, \";}\"), \".scroll-box-clipper.__jsx-style-dynamic-selector{overflow-y:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}\", \".scroll-box.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;overflow-x:scroll;-webkit-overflow-scrolling:touch;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\", \".scroll-box.__jsx-style-dynamic-selector::-webkit-scrollbar{display:none;}\", \".scroll-area.__jsx-style-dynamic-selector{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;overflow-x:hidden;}\"]));\n  }\n\n}\n\nScrollBar.propTypes = {\n  children: propTypes.node.isRequired\n};\nexport { ScrollBar };","map":null,"metadata":{},"sourceType":"module"}