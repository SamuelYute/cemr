{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\nimport propTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { Actions, actionsPropType } from './Actions';\nimport { Dismiss } from './Dismiss';\nimport { Icon, iconPropType } from './Icon';\nimport { Message } from './Message';\nimport styles, { ANIMATION_TIME } from './styles';\n\nclass AlertBar extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      visible: false,\n      hidden: false\n    });\n\n    _defineProperty(this, \"startDisplayTimeout\", () => {\n      if (this.shouldAutoHide()) {\n        this.displayTimeout = setTimeout(() => {\n          this.hide();\n        }, this.timeRemaining);\n      }\n    });\n\n    _defineProperty(this, \"stopDisplayTimeOut\", () => {\n      if (this.shouldAutoHide()) {\n        const elapsedTime = Date.now() - this.startTime;\n        this.timeRemaining = this.timeRemaining - elapsedTime;\n        clearTimeout(this.displayTimeout);\n      }\n    });\n\n    _defineProperty(this, \"hide\", () => {\n      clearTimeout(this.displayTimeout);\n      this.setState({\n        visible: false\n      });\n      this.onHiddenTimeout = setTimeout(() => {\n        this.setState({\n          hidden: true\n        });\n        this.props.onHidden && this.props.onHidden();\n      }, ANIMATION_TIME);\n    });\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    // Only re-init when props change, ignore state changes\n    if (prevState.visible === this.state.visible && prevState.hidden === this.state.hidden) {\n      this.init();\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.displayTimeout);\n    clearTimeout(this.onHiddenTimeout);\n  }\n\n  init() {\n    this.startTime = Date.now();\n    this.timeRemaining = this.props.duration;\n    this.startDisplayTimeout();\n    this.show();\n  }\n\n  show() {\n    requestAnimationFrame(() => {\n      this.setState({\n        visible: true\n      });\n    });\n  }\n\n  shouldAutoHide() {\n    const _this$props = this.props,\n          permanent = _this$props.permanent,\n          warning = _this$props.warning,\n          critical = _this$props.critical;\n    return !(permanent || warning || critical);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          className = _this$props2.className,\n          children = _this$props2.children,\n          success = _this$props2.success,\n          warning = _this$props2.warning,\n          critical = _this$props2.critical,\n          icon = _this$props2.icon,\n          actions = _this$props2.actions;\n    const _this$state = this.state,\n          visible = _this$state.visible,\n          hidden = _this$state.hidden;\n\n    if (hidden) {\n      return null;\n    }\n\n    const info = !critical && !success && !warning;\n    const iconProps = {\n      icon,\n      critical,\n      success,\n      warning\n    };\n    return React.createElement(\"div\", {\n      onMouseEnter: this.stopDisplayTimeOut,\n      onMouseLeave: this.startDisplayTimeout,\n      className: \"jsx-\".concat(styles.__hash) + \" \" + (cx(className, {\n        info,\n        success,\n        warning,\n        critical,\n        visible\n      }) || \"\")\n    }, React.createElement(Icon, iconProps), React.createElement(Message, null, children), React.createElement(Actions, {\n      actions: actions,\n      hide: this.hide\n    }), React.createElement(Dismiss, {\n      onClick: this.hide\n    }), React.createElement(_JSXStyle, {\n      id: styles.__hash\n    }, styles));\n  }\n\n}\n\nAlertBar.propTypes = {\n  className: propTypes.string,\n  children: propTypes.string.isRequired,\n  success: statusPropType,\n  warning: statusPropType,\n  critical: statusPropType,\n  icon: iconPropType,\n  duration: propTypes.number,\n  permanent: propTypes.bool,\n  actions: actionsPropType,\n  onHidden: propTypes.func\n};\nAlertBar.defaultProps = {\n  icon: true,\n  duration: 8000\n};\nexport { AlertBar };","map":null,"metadata":{},"sourceType":"module"}