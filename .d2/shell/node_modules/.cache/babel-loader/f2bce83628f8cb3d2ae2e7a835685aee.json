{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport cx from 'classnames';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { statusPropType } from '../common-prop-types';\nimport { Checked, Indeterminate, Unchecked } from '../icons/Checkbox';\nimport { colors, theme } from '../theme.js';\nconst icons = {\n  styles: React.createElement(_JSXStyle, {\n    id: \"63432708\"\n  }, [\"svg.jsx-63432708{display:block;height:24px;width:24px;fill:\".concat(theme.default, \";}\"), \".focus.jsx-63432708{fill:\".concat(colors.grey800, \";}\"), \".checked.jsx-63432708{fill:\".concat(colors.teal400, \";}\"), \".disabled.jsx-63432708{fill:\".concat(theme.disabled, \";}\"), \".error.jsx-63432708{fill:\".concat(theme.error, \";}\"), \".valid.jsx-63432708{fill:\".concat(theme.valid, \";}\"), \".warning.jsx-63432708{fill:\".concat(theme.warning, \";}\")]),\n  className: \"jsx-63432708\"\n};\nexport const Icon = ({\n  focus,\n  checked,\n  disabled,\n  valid,\n  error,\n  warning,\n  indeterminate\n}) => {\n  const classes = cx(icons.className, {\n    checked: checked && !valid && !error && !warning,\n    focus,\n    disabled,\n    valid,\n    error,\n    warning\n  });\n  return React.createElement(\"div\", {\n    className: _JSXStyle.dynamic([[\"1369204040\", [colors.blue600]]]) + \" \" + (cx({\n      focus\n    }) || \"\")\n  }, indeterminate ? React.createElement(Indeterminate, {\n    className: classes\n  }) : checked ? React.createElement(Checked, {\n    className: classes\n  }) : React.createElement(Unchecked, {\n    className: classes\n  }), icons.styles, React.createElement(_JSXStyle, {\n    id: \"1369204040\",\n    dynamic: [colors.blue600]\n  }, [\"div.__jsx-style-dynamic-selector{position:relative;margin:0 6px 0 0;}\", \".focus.__jsx-style-dynamic-selector:before{content:'';position:absolute;border:2px solid \".concat(colors.blue600, \";border-radius:4px;width:100%;height:100%;}\")]));\n};\nIcon.propTypes = {\n  checked: propTypes.bool,\n  disabled: propTypes.bool,\n  valid: statusPropType,\n  error: statusPropType,\n  warning: statusPropType,\n  indeterminate: propTypes.bool,\n  focus: propTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}